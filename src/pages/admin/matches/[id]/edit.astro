---
import Layout from '../../../../layouts/Layout.astro';
import { getMatch } from '../../../../lib/db/matches';
import { getMatchPlayers } from '../../../../lib/db/match-players';
import { getPlayers } from '../../../../lib/db/players';
import { getClubs } from '../../../../lib/db/clubs';

const { id } = Astro.params;
const matchId = parseInt(id);

const match = await getMatch(matchId);
if (!match) {
  return Astro.redirect('/admin/matches');
}

const allPlayers = await getPlayers();
const matchPlayers = await getMatchPlayers(matchId);
const clubs = await getClubs();
const opponentClubs = clubs.filter(club => club.id !== 1); // Exclude KDA

const playerDetails = matchPlayers.map(mp => {
  const player = allPlayers.find(p => p.id === mp.player_id);
  return {
    ...player,
    matchStats: {
      goals: mp.goals,
      assists: mp.assists
    }
  };
});
---

<Layout title="Ajouter un Match">
  <div class="max-w-4xl mx-auto py-8">
    <h1 class="text-3xl font-bold text-primary mb-8">Ajouter un Match</h1>

    <form id="matchForm" class="bg-white rounded-lg shadow-lg p-6">
      <div class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="date" class="block text-sm font-medium text-gray-700">Date</label>
            <input
              type="date"
              id="date"
              name="date"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
            />
          </div>

          <div>
            <label for="time" class="block text-sm font-medium text-gray-700">Heure</label>
            <input
              type="time"
              id="time"
              name="time"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
            />
          </div>
        </div>

        <div>
          <label for="match_type" class="block text-sm font-medium text-gray-700">Type de Match</label>
          <select
            id="match_type"
            name="match_type"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
          >
            <option value="">Sélectionner un type</option>
            <option value="FRIENDLY">Match Amical</option>
            <option value="MCDO_POOL">Poule McDo</option>
            <option value="CUP">Coupe</option>
            <option value="CHAMP_CUP">Champ' Cup</option>
          </select>
        </div>

        <div>
          <label for="competition_round" class="block text-sm font-medium text-gray-700">Tour de compétition</label>
          <input
            type="text"
            id="competition_round"
            name="competition_round"
            placeholder="Ex: Quart de finale, Journée 3, etc."
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Adversaire</label>
          <div id="opponent_club_container" class="hidden">
            <select
              name="opponent_club_id"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
            >
              <option value="">Sélectionner un club</option>
              {opponentClubs.map(club => (
                <option value={club.id}>{club.name}</option>
              ))}
            </select>
          </div>

          <div id="opponent_name_container">
            <input
              type="text"
              name="opponent_name"
              placeholder="Nom de l'équipe adverse"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
            />
          </div>

        <div>
          <label for="location" class="block text-sm font-medium text-gray-700">Lieu</label>
          <input
            type="text"
            id="location"
            name="location"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Joueurs participants</label>
          <div class="space-y-2 max-h-60 overflow-y-auto">
            {players.map((player) => (
              <label class="flex items-center space-x-3">
                <input
                  type="checkbox"
                  name="players"
                  value={player.id}
                  class="rounded border-gray-300 text-primary focus:ring-primary"
                />
                <span class="text-gray-700">
                  #{player.number} - {player.name} ({player.position})
                </span>
              </label>
            ))}
          </div>
        </div>

        <div class="flex justify-end space-x-4">
          <a 
            href="/admin/matches"
            class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors"
          >
            Annuler
          </a>
          <button
            type="submit"
            class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-opacity-90 transition-colors"
          >
            Ajouter
          </button>
        </div>
      </div>
    </form>
  </div>
</Layout>

<script>
  const matchForm = document.getElementById('matchForm');
  const matchTypeSelect = document.getElementById('match_type');
  const opponentClubContainer = document.getElementById('opponent_club_container');
  const opponentNameContainer = document.getElementById('opponent_name_container');

  // Toggle opponent input based on match type
  matchTypeSelect?.addEventListener('change', (e) => {
    const matchType = (e.target as HTMLSelectElement).value;
    const opponentClubSelect = document.querySelector('[name="opponent_club_id"]') as HTMLSelectElement;
    const opponentNameInput = document.querySelector('[name="opponent_name"]') as HTMLInputElement;

    if (matchType === 'MCDO_POOL') {
      opponentClubContainer?.classList.remove('hidden');
      opponentNameContainer?.classList.add('hidden');
      opponentClubSelect.required = true;
      opponentNameInput.required = false;
      opponentNameInput.value = '';
    } else {
      opponentClubContainer?.classList.add('hidden');
      opponentNameContainer?.classList.remove('hidden');
      opponentClubSelect.required = false;
      opponentNameInput.required = true;
      opponentClubSelect.value = '';
    }
  });

  matchForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const form = e.target as HTMLFormElement;
    const matchId = form.dataset.matchId;
    const formData = new FormData(form);
    
    const file = formData.get('match_image') as File;

  // Vérifiez si un fichier a été sélectionné
  let imageUrl = null;
  if (file) {
    try {
      const fileName = `${Date.now()}_${file.name}`; // Nom unique pour l'image
      const { data, error } = await supabase.storage
        .from('Images') // Nom du bucket Supabase
        .upload(fileName, file);

      if (error) throw error;

      // Récupérez l'URL publique de l'image
      const { data: publicUrlData } = supabase.storage
        .from('Images')
        .getPublicUrl(data.path);

      imageUrl = publicUrlData.publicUrl;
    } catch (error) {
      console.error('Error uploading image:', error);
      alert('Erreur lors du téléchargement de l\'image.');
      return;
    }
  }

    const selectedPlayers = formData.getAll('players').map(id => parseInt(id.toString()));
    const matchType = formData.get('match_type');
    const opponentClubId = formData.get('opponent_club_id');
    
    const matchData = {
  date: formData.get('date'),
  time: formData.get('time'),
  match_type: matchType,
  competition_round: formData.get('competition_round') || null,
  location: formData.get('location'),
  opponent_name: matchType === 'MCDO_POOL' 
    ? document.querySelector(`[name="opponent_club_id"] option[value="${opponentClubId}"]`)?.textContent
    : formData.get('opponent_name'),
  opponent_club_id: matchType === 'MCDO_POOL' ? parseInt(opponentClubId as string) : null,
    lineup_image: imageUrl,
  home_score: formData.get('home_score') ? parseInt(formData.get('home_score').toString()) : null,
  away_score: formData.get('away_score') ? parseInt(formData.get('away_score').toString()) : null,
  is_completed: formData.get('is_completed') === 'on',
  players: selectedPlayers.map(playerId => ({
    player_id: playerId,
    goals: parseInt(formData.get(`goals_${playerId}`)?.toString() || '0'),
    assists: parseInt(formData.get(`assists_${playerId}`)?.toString() || '0')
  }))
};


    try {
      const response = await fetch(`/api/matches/${matchId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(matchData),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Error updating match');
      }

      window.location.href = '/admin/matches';
    } catch (error) {
      console.error('Error:', error);
      alert(error instanceof Error ? error.message : 'Error updating match');
    }
  });
</script>

