---
import Layout from '../../../layouts/Layout.astro';
import { getNews } from '../../../lib/db/news';
import { protectRoute } from '../../../lib/auth';

export const prerender = false;

const session = await protectRoute(Astro);

const news = await getNews(true);
---

<Layout title="Gestion des Actualités">
  <div class="max-w-4xl mx-auto py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold text-primary">Gestion des Actualités</h1>
      <a 
        href="/admin/news/new" 
        class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-opacity-90 transition-colors"
      >
        Ajouter une actualité
      </a>
    </div>

    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
      <table class="min-w-full">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Titre</th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {news && news.map((article) => (
            <tr>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {new Date(article.date).toLocaleDateString('fr-FR')}
              </td>
              <td class="px-6 py-4 text-sm text-gray-900">
                {article.title}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-center">
                <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                  article.published 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {article.published ? 'Publié' : 'Brouillon'}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <a 
                  href={`/admin/news/${article.id}/edit`}
                  class="text-primary hover:text-opacity-80 mr-4"
                >
                  Modifier
                </a>
                <button
                  data-article-id={article.id}
                  class="text-red-600 hover:text-red-800 delete-article"
                >
                  Supprimer
                </button>
              </td>
            </tr>
          ))}
          {(!news || news.length === 0) && (
            <tr>
              <td colspan="4" class="px-6 py-4 text-center text-gray-500">
                Aucune actualité n'a été créée
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.delete-article').forEach(button => {
      button.addEventListener('click', async (e) => {
        const articleId = (e.target as HTMLButtonElement).dataset.articleId;
        
        if (confirm('Êtes-vous sûr de vouloir supprimer cette actualité ?')) {
          try {
            const response = await fetch(`/api/news/${articleId}`, {
              method: 'DELETE',
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.message || 'Error deleting article');
            }

            window.location.reload();
          } catch (error) {
            console.error('Error:', error);
            alert(error instanceof Error ? error.message : 'Error deleting article');
          }
        }
      });
    });
  });
</script>
