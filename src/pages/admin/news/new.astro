---
import Layout from '../../../layouts/Layout.astro';
import { protectRoute } from '../../../lib/auth';

export const prerender = false;

const session = await protectRoute(Astro);
---

<Layout title="Ajouter une Actualité">
  <div class="max-w-4xl mx-auto py-8">
    <h1 class="text-3xl font-bold text-primary mb-8">Ajouter une Actualité</h1>

    <form id="newsForm" class="bg-white rounded-lg shadow-lg p-6">
      <div class="space-y-6">
        <div>
          <label for="title" class="block text-sm font-medium text-gray-700"
            >Titre</label
          >
          <input
            type="text"
            id="title"
            name="title"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
          />
        </div>

        <div>
          <label for="summary" class="block text-sm font-medium text-gray-700"
            >Résumé</label
          >
          <textarea
            id="summary"
            name="summary"
            rows="2"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
          ></textarea>
        </div>

        <div>
          <label for="content" class="block text-sm font-medium text-gray-700"
            >Contenu</label
          >
          <textarea
            id="content"
            name="content"
            rows="10"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
          ></textarea>
        </div>

        <div>
          <label
            for="news_image"
            class="block text-sm font-medium text-gray-700 mt-4"
            >Image de l'article</label
          >
          <input
            type="file"
            id="news_image"
            name="news_image"
            accept="image/*"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
          />
        </div>

        <div>
          <label class="flex items-center">
            <input
              type="checkbox"
              name="published"
              class="rounded border-gray-300 text-primary focus:ring-primary"
            />
            <span class="ml-2 text-sm text-gray-700">Publier immédiatement</span
            >
          </label>
        </div>

        <div class="flex justify-end space-x-4">
          <a
            href="/admin/news"
            class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors"
          >
            Annuler
          </a>
          <button
            type="submit"
            class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-opacity-90 transition-colors"
          >
            Ajouter
          </button>
        </div>
      </div>
    </form>
  </div>
</Layout>

<script>
  import { supabase } from "../../../lib/supabaseClient";

  document.getElementById("newsForm")?.addEventListener("submit", async (e) => {
    e.preventDefault();

    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);

    const file = formData.get("news_image") as File;

    // Vérifiez si un fichier a été sélectionné
    let imageUrl = null;
    if (file) {
      try {
        const fileName = `${Date.now()}_${file.name}`; // Nom unique pour l'image
        const { data, error } = await supabase.storage
          .from("Images") // Nom du bucket Supabase
          .upload(fileName, file);

        if (error) throw error;

        // Récupérez l'URL publique de l'image
        const { data: publicUrlData } = supabase.storage
          .from("Images")
          .getPublicUrl(data.path);

        imageUrl = publicUrlData.publicUrl;
      } catch (error) {
        console.error("Error uploading image:", error);
        alert("Erreur lors du téléchargement de l'image.");
        return;
      }
    }

    const articleData = {
      title: formData.get("title"),
      summary: formData.get("summary"),
      content: formData.get("content"),
      image: imageUrl,
      date: new Date().toISOString(),
      published: formData.get("published") === "on",
    };

    try {
      const response = await fetch("/api/news", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(articleData),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Error creating article");
      }

      window.location.href = "/admin/news";
    } catch (error) {
      console.error("Error:", error);
      alert(error instanceof Error ? error.message : "Error creating article");
    }
  });
</script>
