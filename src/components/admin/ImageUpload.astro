---
interface Props {
  id: string;
  label: string;
  currentImage?: string;
}

const { id, label, currentImage } = Astro.props;
---

<div>
  <label for={id} class="block text-sm font-medium text-gray-700">{label}</label>
  <div class="mt-1 flex flex-col gap-4">
    <input
      type="file"
      id={id}
      name={id}
      accept="image/*"
      class="block w-full text-sm text-gray-500
        file:mr-4 file:py-2 file:px-4
        file:rounded-md file:border-0
        file:text-sm file:font-semibold
        file:bg-primary file:text-white
        hover:file:bg-opacity-90"
    />
    {currentImage && (
      <div class="relative">
        <img 
          src={currentImage}
          alt="Image actuelle"
          class="max-w-xs rounded-lg shadow-sm"
        />
        <input type="hidden" name={`${id}_current`} value={currentImage} />
      </div>
    )}
    <div id={`${id}_preview`} class="hidden">
      <p class="text-sm font-medium text-gray-700 mb-2">Aperçu :</p>
      <img class="max-w-xs rounded-lg shadow-sm" />
      <div class="mt-2 text-sm text-gray-500" id={`${id}_upload_status`}></div>
    </div>
  </div>
</div>

<script define:vars={{ id }}>
const input = document.getElementById(id);
const preview = document.getElementById(`${id}_preview`);
const previewImg = preview?.querySelector('img');
const uploadStatus = document.getElementById(`${id}_upload_status`);

input?.addEventListener('change', async (e) => {
  const file = e.target.files?.[0];
  if (!file) {
    preview?.classList.add('hidden');
    return;
  }

  // Show preview
  const reader = new FileReader();
  reader.onload = (e) => {
    if (previewImg && e.target?.result) {
      previewImg.src = e.target.result.toString();
      preview?.classList.remove('hidden');
    }
  };
  reader.readAsDataURL(file);

  // Show upload status
  if (uploadStatus) {
    uploadStatus.textContent = 'Image prête à être envoyée';
    uploadStatus.classList.remove('text-red-500');
    uploadStatus.classList.add('text-gray-500');
  }
});
</script>